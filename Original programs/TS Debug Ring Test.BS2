' TS Debug Ring Test.BS2
' {$STAMP BS2}
' {$PBASIC 2.5}
'
'********************* Ring Test Program ************************************
'
' Copyright Louis A. Lippincott 2013 All Rights Reserved
'
'
' This program prints the line thresholds and dynamic values for the line sensors.
' Use this program to debug your Line Sensors if the Ring Test does not work properly.
'
'*************************************************************************************

' -----[ I/O Definitions ]-------------------------------------------------

Speaker      PIN        1                       ' Speaker
RedLED       PIN        0                       ' Red LED used to show status

LIrOut       PIN        4                       ' left IR LED output
LIRIn        PIN        11                      ' left IR sensor input
RIROut       PIN        15                      ' right IR LED output
RIRIn        PIN        14                      ' right IR sensor input

LMotor       PIN        13                      ' left servo motor
RMotor       PIN        12                      ' right servo motor

LLinePower   PIN        10                      ' left line sensor power
LLineIn      PIN        9                       ' left line sensor input
RLinePower   PIN        7                       ' right line sensor power
RLineIn      PIN        8                       ' right line sensor input


' -----[ Variables ]-------------------------------------------------------

Run_Count    VAR        Byte                    ' Count how many matches we've played between power cycles
Delay_Count  VAR        Byte                    ' Count how many seconds since reset button
LLine        VAR        Word                    ' left sensor raw reading
RLine        VAR        Word                    ' right sensor raw reading
LBlackThresh VAR        Word                    ' QTI black threshold - Left
RBlackThresh VAR        Word                    ' QTI black threshold - Right
LineBits     VAR        Nib                     ' decoded sensors value
LbLeft       VAR        lineBits.BIT1
LbRight      VAR        lineBits.BIT0

' -----[ EEPROM Data ]-----------------------------------------------------

RunCount    DATA       $00                     ' Run counter

'*****************************************************************************************
' -----[ Initialization ]--------------------------------------------------
'*****************************************************************************************
'************************** DO NOT CHANGE CODE HERE! (Rule Violation!) *******************
'*****************************************************************************************
Reset:
  LOW LMotor                                   ' Make Motor pins outputs
  LOW RMotor

  READ RunCount, Run_Count                     ' Read Run Counter
  Run_Count = Run_Count + 1                    ' Ran one more time
  WRITE RunCount, Run_Count                    ' Store it back into NVRAM
  Run_Count = Run_Count & 1                    ' Make it Odd or Even
  IF (Run_Count = 1) THEN END                  ' Run every other time reset button is pushed

Start_Delay:                                   ' five second delay
  FOR Delay_Count = 1 TO 5
    HIGH RedLED                                ' show active
    PAUSE 700
    INPUT RedLED                               ' blink each second
    FREQOUT Speaker, 300, 4000, 3300           ' beep each second
  NEXT
'*****************************************************************************************
'*****************************************************************************************

' Sets black threshold to the initial reading of the two sensor readings minus an offset.
' SumoBot must be placed over black playing surface before this code runs.
' Moved this code here to allow the SumoBot to settle and shadows to retreat after Reset is pushed.

Set_Threshold:                                  ' set QTI black threshold
  GOSUB Read_Line_Sensors                       ' Higher numbers mean darker surface.
  LBlackThresh = LLine * 7/10                 ' Set Left Line Sensor threshold
  RBlackThresh = RLine * 7/10                 ' Set Right Line Sensor threshold

' ********************************************************************************
' ********************************************************************************

' -----[ Program Code ]----------------------------------------------------

Main:
' ********************************************************************************

  GOSUB Read_Line_Sensors

    DEBUG HOME,
          "Left ", TAB, "Left Threshold",CR,
          "-----", TAB, "--------------",CR,
          DEC lLine, CLREOL, TAB, DEC LBlackThresh, CR,CR,
          "Right", TAB, "Right Threshold", CR,
          "-----", TAB, "--------------", CR,
          DEC rLine, CLREOL, TAB, DEC RBlackThresh, CLREOL

    PAUSE 100

  GOTO Main

' ********************************************************************************
' ********************************************************************************


' -----[ Subroutines ]-----------------------------------------------------

Read_Line_Sensors:
  HIGH LLinePower                               ' Activate sensors
  HIGH RLinePower
  HIGH LLineIn                                  ' Discharge caps
  HIGH RLineIn
  PAUSE 1
  RCTIME LLineIn, 1, lLine                      ' Read left sensor (Higher numbers mean darker surface)
  RCTIME RLineIn, 1, rLine                      ' Read right sensor (Higher numbers mean darker surface)
  LOW LLinePower                                ' Deactivate sensors
  LOW RLinePower                                ' Deactivate sensors
                                                ' Convert readings to bits
  LOOKDOWN LLine, >=[LBlackThresh, 0], LbLeft   ' 0 = black, 1 = line
  LOOKDOWN RLine, >=[RBlackThresh, 0], LbRight  ' 0 = black, 1 = line
  RETURN
